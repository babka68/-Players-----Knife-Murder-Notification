/* ============================================================================================================
// EN: Connecting the colors library
// RU: Подключаем библиотеку colors
// ==========================================================================================================*/
#include <colors>

/* ============================================================================================================
// EN: Notifies the compiler that there should be a character at the end of each expression ;
// RU: Сообщает компилятору о том, что в конце каждого выражения должен стоять символ ;
// ==========================================================================================================*/

#pragma semicolon 1
/* =============================================================================================================
// EN: Notifies the compiler that the plugin syntax is exceptionally new
// RU: Сообщает компилятору о том, что синтаксис плагина исключительно новый
// ===========================================================================================================*/
#pragma newdecls required

/* =============================================================================================================
// EN: Public information about the plugin.
// RU: Общественная информация о плагине.
// ===========================================================================================================*/

public Plugin myinfo = 
{
	/* ============================================================================================================
	// EN: The name of the plugin.
	// RU: Название плагина. 
	// ==========================================================================================================*/
	name = "[Players] --- Knife Murder Notification", 
	/* ============================================================================================================
	// EN: The author of the plugin.
	// RU: Автор плагина.
	// ==========================================================================================================*/
	author = "babka68", 
	/* ============================================================================================================
	// EN: A brief description of the plugin.
	// RU: Краткое описание плагина.
	// ==========================================================================================================*/
	description = "Текстовое уведомление об убийстве ножом", 
	/* ============================================================================================================
	// EN: The version of this plugin.
	// RU: Версия данного плагина.
	// ==========================================================================================================*/
	version = "1.0", 
	/* ============================================================================================================
	// EN: Plugin (author's) support site.
	// RU: Сайт поддержки плагина (автора).
	// ===========================================================================================================*/
	url = "https://vk.com/zakazserver68"
};

/* =============================================================================================================
// EN: Declaring a new variable g_beadle to store one of 2 boolean values (now the default is false or 0).
// RU: Объявляем новую переменную g_bEnadle для хранения одного из 2 логических значений (сейчас по умолчанию - false или 0).
// =============================================================================================================*/
bool g_bEnable;

char g_sKnife_Murder_Prefix[100];

/* =============================================================================================================
// EN: A built-in global event whose function is a single call when the plugin is fully initialized.
// RU: Встроенное глобальное событие, функция которого - единождый вызов при полной инициализации плагина.
// =============================================================================================================*/
public void OnPluginStart()
{
	/* =============================================================================================================
	// EN: Catching an event called player_death. EventHookMode_Pre - The callback occurs before the event occurs
	// RU: Отлавливаем событие с названием player_death. EventHookMode_Pre - Обратный вызов происходит до того, как событие произойдет
	// =============================================================================================================*/
	HookEvent("player_death", view_as<EventHook>(Event_Player_Death), view_as<EventHookMode>(EventHookMode_Pre));
	
	/* =============================================================================================================
	// EN: Register a local ConVar and call it cvar
	// RU: Зарегистрируйте локальный ConVar и назовите его cvar
	// =============================================================================================================*/
	ConVar cvar;
	
	/* =============================================================================================================
	// EN: Create a quar "sm_knife_murder_enable" and equate its value to the previously created cvar descriptor. We set it to a minimum of 0, a maximum of 1.
	// RU: Создайте "sm_knife_murder_enable" и приравняйте его значение к ранее созданному дескриптору cvar. Мы устанавливаем его как минимум на 0, максимум на 1.
	// =============================================================================================================*/
	cvar = CreateConVar("sm_knife_murder_enable", "1", "Включить плагин? [1 - Включить, 0 - Нет]", _, true, 0.0, true, 1.0);
	
	/* =============================================================================================================
	// EN: Assign a logical global value to bool
	// RU: Присвоите логическое глобальное значение bool
	// =============================================================================================================*/
	g_bEnable = cvar.BoolValue;
	
	/* =============================================================================================================
	// EN: Creates a hook for when a console variable's value is changed.
	// RU: Создает перехватчик при изменении значения консольной переменной.
	// =============================================================================================================*/
	cvar.AddChangeHook(Change_Knife_Murder_Enable);
	
	/* =============================================================================================================
	// EN: Create a quar "sm_knife_murder_prefix" and equate its value to the previously created cvar descriptor.
	// RU: Создайте "sm_knife_murder_prefix" и приравняйте его значение к ранее созданному дескриптору cvar. 
	// =============================================================================================================*/
	cvar = CreateConVar("sm_knife_murder_prefix", "[Knife Murder]", "Желаемый префикс перед текстом");
	
	/* =============================================================================================================
	// EN: Creates a hook for when a console variable's value is changed.
	// RU: Создает перехватчик при изменении значения консольной переменной.
	// =============================================================================================================*/
	cvar.AddChangeHook(Change_Knife_Murder_Prefix);
	
	/* =============================================================================================================
	// EN: Extracts or sets a string value for a console variable
	// RU: Извлекает или устанавливает строковое значение для консольной переменной
	// =============================================================================================================*/
	cvar.GetString(g_sKnife_Murder_Prefix, sizeof(g_sKnife_Murder_Prefix));
	
	/* =============================================================================================================
	// EN: Specifies that this configuration file should be executed after the plugin is loaded. along the cfg/sourcemod path.
	// RU: Указывает, что данный конфигурационный файл должен быть выполнен после загрузки плагина. по пути cfg/sourcemod.
	// =============================================================================================================*/
	AutoExecConfig(true, "knife_murder");
}

/* =============================================================================================================
// EN: Change_Knife_Murder_Enable callback function.
// RU: Функция обратного вызова Change_Knife_Murder_Enable.
// =============================================================================================================*/
public void Change_Knife_Murder_Enable(ConVar cvar, const char[] oldValue, const char[] newValue)
{
	/* =============================================================================================================
	// EN: Assign a logical global value to bool
	// RU: Присвоите логическое глобальное значение bool
	// =============================================================================================================*/
	g_bEnable = cvar.BoolValue;
}

/* =============================================================================================================
// EN: Change_Knife_Murder_Prefix callback function.
// RU: Функция обратного вызова Change_Knife_Murder_Prefix.
// =============================================================================================================*/
public void Change_Knife_Murder_Prefix(ConVar cvar, const char[] oldValue, const char[] newValue)
{
	/* =============================================================================================================
	// EN: Assign a string global value to char
	// RU: Присвоите строковое глобальное значение char
	// =============================================================================================================*/
	cvar.GetString(g_sKnife_Murder_Prefix, sizeof(g_sKnife_Murder_Prefix));
}

/* =============================================================================================================
// EN: Event_Player_Death callback function.
// RU: Функция обратного вызова Event_Player_Death.
// =============================================================================================================*/
public Action Event_Player_Death(Event event, const char[] name, bool dontBroadcast)
{
	/* =============================================================================================================
	// EN: if the plugin is enabled, then we continue further
	// RU: Если плагин включен, то мы продолжаем дальше
	// =============================================================================================================*/
	if (g_bEnable)
	{
		char weapon_Name[100];
		event.GetString("weapon", weapon_Name, 100);
		
		if (StrEqual(weapon_Name, "knife"))
		{
			static int killer, victim;
			
			killer = GetClientOfUserId(event.GetInt("attacker"));
			victim = GetClientOfUserId(event.GetInt("userid"));
			
			if (killer && victim > 0 && IsClientInGame(killer) && IsClientInGame(victim))
			{
				if (GetClientTeam(killer) != GetClientTeam(victim))
				{
					CPrint(killer, _, "{#00FF00}%s {#FFFFFF} Игрок {team}%N {#FFFFFF} убил ножом {#6A5ACD}%N", g_sKnife_Murder_Prefix, killer, victim);
				}
			}
		}
	}
}
